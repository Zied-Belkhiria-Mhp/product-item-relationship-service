@startuml

actor APIConsumer
skinparam monochrome true
skinparam shadowing false
autonumber "<b>[000]"

box "IRS" #LightBlue
participant ApiEndpointExtension
activate WebService
ApiEndpointExtension -> WebService: new()
ApiEndpointExtension -> ConsumerApiController: new()
activate ConsumerApiController
ApiEndpointExtension -> ConsumerService: new()



activate ConsumerService
ApiEndpointExtension -> JobOrchestrator: new()
activate JobOrchestrator


ApiEndpointExtension -> InMemoryJobStore: new()
activate InMemoryJobStore
ApiEndpointExtension ->  PartsTreeRecursiveLogic: new()
activate PartsTreeRecursiveLogic
ApiEndpointExtension ->  DataRequestFactory: new()
activate DataRequestFactory
participant PartsTreeRecursiveJobHandler
participant TransferProcessManager
database Blobstore

WebService -> ConsumerApiController: register (monitor, service, middleware)

APIConsumer -> ConsumerApiController: retrievePartsTree
ConsumerApiController -> ConsumerService : retrievePartsTree(request)
ConsumerService -> Blobstore : createContainer(storageAccountName, UUID)
ConsumerService <- Blobstore : success
note over ConsumerService
startJob -> JobOrchestrator
end note
ConsumerService -> JobOrchestrator: startJob(aasId, BlobstoreContainer, destinationKey)
JobOrchestrator -> InMemoryJobStore: create(Job)


InMemoryJobStore -> InMemoryJobStore: create(job)
JobOrchestrator -> PartsTreeRecursiveJobHandler: initiate(Job)
PartsTreeRecursiveJobHandler -> PartsTreeRecursiveJobHandler: initiate(Job)
PartsTreeRecursiveJobHandler -> PartsTreeRecursiveJobHandler: getPartsTreeRequest(Job)
PartsTreeRecursiveJobHandler -> InMemoryJobStore : get(jobRequest)


PartsTreeRecursiveJobHandler -> PartsTreeRecursiveLogic : createInitialPartsTreeRequest(request)
PartsTreeRecursiveJobHandler -> DataRequestFactory :createRequest
DataRequestFactory -> DataRequestFactory: getRequestFromRegistry or Endpoint
DataRequestFactory --> Blobstore: store request in Blobstore
PartsTreeRecursiveJobHandler <-- DataRequestFactory: Stream<DataRequest>
JobOrchestrator <-- PartsTreeRecursiveJobHandler: Stream<DataRequest>
loop over  Stream<DataRequest>
    JobOrchestrator -> JobOrchestrator: startTransfer
    ref over JobOrchestrator, TransferProcessManager
        TransferProcessManager: initiateConsumerRequest(dataRequest)
    end ref
    JobOrchestrator --> InMemoryJobStore: addTransferProcess
end loop
PartsTreeRecursiveJobHandler -> PartsTreeRecursiveJobHandler:startTransfers
note over PartsTreeRecursiveJobHandler
    Some other stuff
end note
JobOrchestrator --> InMemoryJobStore: (completeTransferProcess)
JobOrchestrator <-- InMemoryJobStore: success
ConsumerService <-- JobOrchestrator:  return JobInitiateResponse
ConsumerApiController <-- ConsumerService:  return JobInitiateResponse
APIConsumer <-- ConsumerApiController: 200 (jobId)

note over APIConsumer
    returns FATAL_ERROR in case of any Exception during processing
end note
APIConsumer <-- ConsumerApiController: FATAL_ERROR (jobId)


@enduml